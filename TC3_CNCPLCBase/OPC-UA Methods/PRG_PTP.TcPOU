<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="PRG_PTP" Id="{a72edbb1-19b1-424b-b678-cf956e82f477}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_PTP
VAR_INPUT
	enable : BOOL;
END_VAR
VAR_OUTPUT
	done : BOOL;
END_VAR
VAR
	mode : (PTP_idle, PTP_drive, PTP_done, PTP_error);
	y_axis_id, 	c_axis_id	: INT;
	y_counter, 	c_counter	: DINT;
	y_done, 	c_done 		: BOOL;
	speed 			: DINT;
	tolerance 		: DINT := 8;//2;
	intStep			: DINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//TODO: In Fehlerzustand wechseln, falls Achsen einen Fehler melden.

speed := 600; //600 in mm/min
//intStep := speed /60000 * 1000 * 1;  // mm/min * 1/60000 min/ms * 1000 (0,1µm/mm) * 1ms

intStep := 240; //100 bei MAIN 	//Schrittgröße

y_axis_id := 1;		
c_axis_id := 4;

//Enabled axis check
IF NOT GVL_Axes.AllAxesEnabled THEN
	mode := PTP_error;
END_IF


CASE mode OF
	
	PTP_idle:	//General reset
		gpAx[y_axis_id]^.lr_mc_control.add_cmd_values.enable_w := FALSE;
		gpAx[c_axis_id]^.lr_mc_control.add_cmd_values.enable_w := FALSE;
		y_counter := 0;
		c_counter := 0;
		y_done := FALSE;
		c_done := FALSE;
		done := FALSE;
		IF enable THEN
			mode := PTP_drive;
		END_IF
		
	PTP_drive:	//Drive axis to given coordinates
		gpAx[y_axis_id]^.lr_mc_control.add_cmd_values.enable_w := TRUE;
		gpAx[c_axis_id]^.lr_mc_control.add_cmd_values.enable_w := TRUE;
		
		IF GVL_FiveX.OutputPoint.y - GVL_Axes.positionfeedbackvalue_y > tolerance * intStep THEN
			y_counter := y_counter+1;
			y_done := FALSE;
		ELSIF GVL_FiveX.OutputPoint.y - GVL_Axes.positionfeedbackvalue_y < - tolerance * intStep THEN
			y_counter := y_counter-1;
			y_done := FALSE; 
		ELSE
			y_done := TRUE;
		END_IF
		IF GVL_FiveX.OutputPoint.c - GVL_Axes.positionfeedbackvalue_c > 2 * tolerance * intStep THEN
			c_counter := c_counter+1;
			c_done := FALSE;
		ELSIF GVL_FiveX.OutputPoint.c - GVL_Axes.positionfeedbackvalue_c < -2*tolerance * intStep THEN
			c_counter := c_counter-1;
			c_done := FALSE;
		ELSE
			c_done := TRUE;
		END_IF
	
		gpAx[y_axis_id]^.lr_mc_control.add_cmd_values.command_w.m_add_pos_value := y_counter * intStep;
		gpAx[c_axis_id]^.lr_mc_control.add_cmd_values.command_w.m_add_pos_value := c_counter * intStep;	
		
		IF y_done AND c_done THEN
			done := TRUE;
		ELSE
			done := FALSE;
		END_IF	
		
		IF NOT enable AND y_done AND c_done THEN
			mode := PTP_done;
		END_IF
		
	
	PTP_done: 	//Driving back to previous position
		IF y_counter < 0 THEN
			y_counter := y_counter+1;
		ELSIF y_counter > 0 THEN
			y_counter := y_counter-1; 
		ELSE
			gpAx[y_axis_id]^.lr_mc_control.add_cmd_values.enable_w := FALSE;
			y_done := FALSE;
		END_IF

		IF c_counter < 0 THEN
			c_counter := c_counter+1;
		ELSIF c_counter > 0 THEN
			c_counter := c_counter-1;
		ELSE
			gpAx[c_axis_id]^.lr_mc_control.add_cmd_values.enable_w := FALSE;
			c_done := FALSE;
		END_IF
		
		gpAx[y_axis_id]^.lr_mc_control.add_cmd_values.command_w.m_add_pos_value := y_counter * intStep;
		gpAx[c_axis_id]^.lr_mc_control.add_cmd_values.command_w.m_add_pos_value := c_counter * intStep; //+ b_lastpos;
		
		IF NOT y_done AND NOT c_done THEN
			mode := PTP_idle;
		END_IF
		
	PTP_error:	//Error
		IF GVL_Axes.AllAxesEnabled THEN
			mode := PTP_idle;
		END_IF
		//Error
END_CASE


]]></ST>
    </Implementation>
    <LineIds Name="PRG_PTP">
      <LineId Id="389" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="556" Count="3" />
      <LineId Id="554" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="52" Count="2" />
      <LineId Id="450" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="560" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="683" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="451" Count="1" />
      <LineId Id="416" Count="0" />
      <LineId Id="429" Count="1" />
      <LineId Id="519" Count="0" />
      <LineId Id="431" Count="1" />
      <LineId Id="521" Count="0" />
      <LineId Id="457" Count="1" />
      <LineId Id="414" Count="0" />
      <LineId Id="435" Count="1" />
      <LineId Id="446" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="598" Count="3" />
      <LineId Id="349" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="461" Count="1" />
      <LineId Id="460" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="466" Count="5" />
      <LineId Id="502" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="486" Count="6" />
      <LineId Id="505" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="509" Count="1" />
      <LineId Id="278" Count="1" />
      <LineId Id="564" Count="0" />
      <LineId Id="566" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="145" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>